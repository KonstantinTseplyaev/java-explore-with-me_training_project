CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  email VARCHAR(254) NOT NULL,
  name VARCHAR(250) NOT NULL,
  password VARCHAR(250) NOT NULL,
  CONSTRAINT PK_USER PRIMARY KEY (id),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS roles (
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(20) NOT NULL,
    CONSTRAINT PK_ROLE PRIMARY KEY (id)
);

INSERT INTO roles VALUES(1, 'ROLE_ADMIN');
INSERT INTO roles VALUES(2, 'ROLE_USER');

CREATE TABLE IF NOT EXISTS users_roles (
    user_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
    role_id BIGINT REFERENCES roles (id) ON DELETE CASCADE,
    CONSTRAINT PK_US_RL PRIMARY KEY (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(50) NOT NULL,
  CONSTRAINT PK_CAT PRIMARY KEY (id),
  CONSTRAINT UQ_CAT_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS locations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(100),
  radius FLOAT,
  lat FLOAT NOT NULL,
  lon FLOAT NOT NULL,
  CONSTRAINT PK_LOC PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title VARCHAR(120) NOT NULL,
  annotation VARCHAR(2000) NOT NULL,
  category_id BIGINT REFERENCES categories (id) ON DELETE NO ACTION,
  description VARCHAR(7000) NOT NULL,
  event_date TIMESTAMP NOT NULL,
  initiator_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
  location_id BIGINT REFERENCES locations (id) ON DELETE NO ACTION,
  paid BOOLEAN NOT NULL,
  participant_limit INT NOT NULL,
  request_moderation BOOLEAN NOT NULL,
  created_on TIMESTAMP NOT NULL,
  published_on TIMESTAMP,
  state VARCHAR(10) NOT NULL,
  views BIGINT NOT NULL,
  CONSTRAINT PK_EV PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title VARCHAR(50) NOT NULL,
  pinned BOOLEAN NOT NULL,
  CONSTRAINT PK_COMP PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilations_events (
  event_id BIGINT REFERENCES events (id) ON DELETE CASCADE,
  comp_id BIGINT REFERENCES compilations (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  event_id BIGINT REFERENCES events (id) ON DELETE CASCADE,
  requester_id BIGINT REFERENCES users (id) ON DELETE CASCADE,
  created TIMESTAMP NOT NULL,
  state VARCHAR(10) NOT NULL,
  CONSTRAINT PK_REQ PRIMARY KEY (id)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        rad_lat1 = pi() * lat1 / 180;
        rad_lat2 = pi() * lat2 / 180;
        theta = lon1 - lon2;
        rad_theta = pi() * theta / 180;
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        dist = dist * 180 / pi();
        dist = dist * 60 * 1.8524 * 1000;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;







